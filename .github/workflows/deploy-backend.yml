name: Deploy Backend to Azure Web App (Container)

on:
  workflow_dispatch:  # Kun manuell trigger - unng√•r dobbel deployment

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: web-teknotassen
  AZURE_RESOURCE_GROUP: teknotassen-rg
  AZURE_CONTAINER_REGISTRY: acrteknotassen
  IMAGE_NAME: teknotassen-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login to Azure (OIDC)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Create ACR if it doesn't exist
      - name: Create ACR if not exists
        run: |
          echo "Checking if ACR exists..."
          if ! az acr show --name $AZURE_CONTAINER_REGISTRY --resource-group $AZURE_RESOURCE_GROUP >/dev/null 2>&1; then
            echo "ACR does not exist, creating..."
            az acr create \
              --resource-group $AZURE_RESOURCE_GROUP \
              --name $AZURE_CONTAINER_REGISTRY \
              --sku Basic \
              --location norwayeast
            echo "‚úÖ ACR created successfully!"
          else
            echo "‚úÖ ACR already exists!"
          fi

      # Enable admin user on ACR (required for credentials)
      - name: Enable ACR admin user
        run: |
          echo "Enabling admin user on ACR..."
          az acr update --name $AZURE_CONTAINER_REGISTRY --admin-enabled true
          echo "‚úÖ ACR admin user enabled!"

      # Verify ACR permissions
      - name: Verify ACR permissions
        run: |
          echo "üîê Verifying ACR permissions..."
          
          # Check if admin user is enabled
          ADMIN_ENABLED=$(az acr show \
            --name $AZURE_CONTAINER_REGISTRY \
            --query "adminUserEnabled" -o tsv)
          
          echo "ACR admin user enabled: $ADMIN_ENABLED"
          
          if [ "$ADMIN_ENABLED" != "true" ]; then
            echo "‚ùå ACR admin user not enabled - this will cause ImagePullFailure!"
            exit 1
          fi
          
          echo "‚úÖ ACR permissions verified"

      # Get ACR credentials
      - name: Get ACR credentials
        run: |
          echo "Getting ACR credentials..."
          ACR_USERNAME=$(az acr credential show --name $AZURE_CONTAINER_REGISTRY --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $AZURE_CONTAINER_REGISTRY --query "passwords[0].value" -o tsv)
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
          echo "‚úÖ ACR credentials retrieved!"

      # Login to ACR
      - name: 'Login to ACR'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      # Build and Push Docker image
      - name: 'Build and Push Docker image'
        working-directory: .
        run: |
          docker build -f backend/Dockerfile -t $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} .
          docker tag $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }}
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest

      # Verify image exists in ACR
      - name: Verify image in ACR
        run: |
          echo "üîç Verifying image exists in ACR..."
          
          # Check if latest tag exists
          if ! az acr repository show-tags \
            --name $AZURE_CONTAINER_REGISTRY \
            --repository $IMAGE_NAME \
            --query "[?contains(@, 'latest')]" -o tsv | grep -q "latest"; then
            echo "‚ùå Latest image not found in ACR!"
            exit 1
          fi
          
          # Check if commit image exists
          if ! az acr repository show-tags \
            --name $AZURE_CONTAINER_REGISTRY \
            --repository $IMAGE_NAME \
            --query "[?contains(@, '${{ github.sha }}')]" -o tsv | grep -q "${{ github.sha }}"; then
            echo "‚ùå Commit image not found in ACR!"
            exit 1
          fi
          
          echo "‚úÖ Images verified in ACR"

      # Configure Web App for containers BEFORE deployment
      - name: Configure Web App for containers
        run: |
          echo "üîß Configuring Linux Web App for Containers BEFORE deployment"
          
          # Set container runtime for Linux Web App for Containers
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --linux-fx-version "DOCKER|${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
          
          # Set port configuration (Azure Web App standard)
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings WEBSITES_PORT=8181
          
          # Set container registry credentials for Web App
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name "${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest" \
            --docker-registry-server-url "https://${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io" \
            --docker-registry-server-user "${{ env.ACR_USERNAME }}" \
            --docker-registry-server-password "${{ env.ACR_PASSWORD }}"
          
          echo "‚úÖ Linux Web App for Containers configured with ACR authentication"

      # Verify container configuration BEFORE deployment
      - name: Verify container configuration
        run: |
          echo "üîç Verifying Linux Web App for Containers configuration..."
          
          # Check linux-fx-version (for Linux Web App for Containers)
          LINUX_FX_VERSION=$(az webapp config show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "linuxFxVersion" -o tsv)
          
          echo "Linux FX Version: $LINUX_FX_VERSION"
          
          # Check container settings
          CONTAINER_CONFIG=$(az webapp config container show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "{image:dockerImageName,registry:dockerRegistryServerUrl,user:dockerRegistryServerUser}" \
            -o json)
          
          echo "Container config: $CONTAINER_CONFIG"
          
          # Check app settings
          PORT_SETTING=$(az webapp config appsettings list \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "[?name=='WEBSITES_PORT'].value" -o tsv)
          
          echo "WEBSITES_PORT setting: $PORT_SETTING"
          
          # Verify port is set correctly
          if [ "$PORT_SETTING" != "8181" ]; then
            echo "‚ö†Ô∏è Warning: WEBSITES_PORT is not set to 8181 (current: $PORT_SETTING)"
          fi
          
          echo "‚úÖ Linux Web App for Containers configuration verified"

      # Test container image pull from ACR (verify connectivity)
      - name: Test container image pull
        run: |
          echo "üß™ Testing if container image can be pulled from ACR..."
          
          # Try to pull the image locally to verify ACR connectivity
          if docker pull ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest; then
            echo "‚úÖ Container image pull test successful"
          else
            echo "‚ùå Container image pull test failed - ACR connectivity issue!"
            exit 1
          fi

      # Final verification - ensure Web App is ready for deployment
      - name: Final Web App verification
        run: |
          echo "üîç Final verification - ensuring Web App is ready for deployment..."
          
          # Check if Web App is in a good state
          WEBAPP_STATE=$(az webapp show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "state" -o tsv)
          
          echo "Web App state: $WEBAPP_STATE"
          
          # Check if container config is properly set
          CONTAINER_READY=$(az webapp config container show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "dockerImageName" -o tsv)
          
          if [ "$CONTAINER_READY" = "${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest" ]; then
            echo "‚úÖ Web App container configuration verified - ready for deployment!"
          else
            echo "‚ùå Web App container configuration not ready - deployment will fail!"
            exit 1
          fi

      # Deploy to Azure Web App (AFTER container config is set)
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}

      # Wait for deployment
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 30

      # Resolve Web App hostname
      - name: Resolve Web App hostname
        id: resolve-host
        run: |
          HOSTNAME=$(az webapp show \
            --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --query defaultHostName -o tsv)
          echo "HOSTNAME=$HOSTNAME" >> $GITHUB_ENV
          echo "üîç Resolved host: $HOSTNAME"

      # Wait for /healthz to respond
      - name: Wait for /healthz
        shell: bash
        run: |
          echo "üè• Waiting for https://${HOSTNAME}/healthz"
          for i in {1..30}; do
            if curl -fsS --max-time 10 "https://${HOSTNAME}/healthz" > /dev/null; then
              echo "‚úÖ Healthy at https://${HOSTNAME}/healthz"
              exit 0
            fi
            echo "üîÑ Attempt $i/30 ‚Ä¶ not ready yet"; sleep 10
          done
          echo "‚ùå App never became healthy"; exit 1

      # Deployment success info
      - name: Deployment success info
        run: |
          echo "üéâ Backend deployed successfully!"
          echo "Image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
          echo "Web App: https://${HOSTNAME}"
          echo "Health: https://${HOSTNAME}/healthz"
          echo "Runtime: Linux Web App for Containers with Node.js 20"
          echo "Port: 8181 (WEBSITES_PORT setting)"
          echo "Container Config: Linux FX Version with ACR authentication"
          echo "ACR: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io"
