name: Deploy Backend to Azure Web App (Container)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: web-teknotassen
  AZURE_RESOURCE_GROUP: teknotassen-rg
  AZURE_CONTAINER_REGISTRY: acrteknotassen
  IMAGE_NAME: teknotassen-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login to Azure (OIDC ‚Äì forutsetter Federated Credentials er satt opp i Azure)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Create ACR if it doesn't exist
      - name: Create ACR if not exists
        run: |
          echo "Checking if ACR exists..."
          if ! az acr show --name $AZURE_CONTAINER_REGISTRY --resource-group $AZURE_RESOURCE_GROUP >/dev/null 2>&1; then
            echo "ACR does not exist, creating..."
            az acr create \
              --resource-group $AZURE_RESOURCE_GROUP \
              --name $AZURE_CONTAINER_REGISTRY \
              --sku Basic \
              --location norwayeast
            echo "‚úÖ ACR created successfully!"
          else
            echo "‚úÖ ACR already exists!"
          fi

      # Enable admin user on ACR (required for credentials)
      - name: Enable ACR admin user
        run: |
          echo "Enabling admin user on ACR..."
          az acr update --name $AZURE_CONTAINER_REGISTRY --admin-enabled true
          echo "‚úÖ ACR admin user enabled!"

      # Get ACR credentials
      - name: Get ACR credentials
        run: |
          echo "Getting ACR credentials..."
          ACR_USERNAME=$(az acr credential show --name $AZURE_CONTAINER_REGISTRY --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $AZURE_CONTAINER_REGISTRY --query "passwords[0].value" -o tsv)
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
          echo "‚úÖ ACR credentials retrieved!"

      # Login to ACR using Microsoft's recommended action
      - name: 'Login to ACR'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      # Build and Push Docker image
      - name: 'Build and Push Docker image'
        working-directory: .
        run: |
          docker build -f backend/Dockerfile -t $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} .
          docker tag $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }}
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest

      # Deploy to Azure Web App using the recommended action
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      # CTO's Quickfix: Set WEBSITES_PORT=8181 for immediate success
      - name: Set WEBSITES_PORT for container compatibility
        run: |
          echo "üîß Setting WEBSITES_PORT=8181 (CTO's quickfix)"
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings WEBSITES_PORT=8181
          echo "‚úÖ WEBSITES_PORT set to 8181"

      # Fix NODE_ENV typo (NOD_ENV = protection ‚Üí NODE_ENV = production)
      - name: Fix NODE_ENV typo in Azure settings
        run: |
          echo "üîß Fixing NODE_ENV typo (NOD_ENV ‚Üí NODE_ENV)"
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings NODE_ENV=production
          echo "‚úÖ NODE_ENV set to production"

      # Wait for deployment
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 30

      # CTO's Solution: Resolve actual hostname from Azure (not assume azurewebsites.net)
      - name: Resolve Web App hostname
        id: resolve-host
        run: |
          HOSTNAME=$(az webapp show \
            --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --query defaultHostName -o tsv)
          echo "HOSTNAME=$HOSTNAME" >> $GITHUB_ENV
          echo "üîç Resolved host: $HOSTNAME"

      # Wait for /healthz to respond with 200 (CTO's health check)
      - name: Wait for /healthz
        shell: bash
        run: |
          echo "üè• Waiting for https://${HOSTNAME}/healthz"
          for i in {1..30}; do
            if curl -fsS --max-time 10 "https://${HOSTNAME}/healthz" > /dev/null; then
              echo "‚úÖ Healthy at https://${HOSTNAME}/healthz"
              exit 0
            fi
            echo "üîÑ Attempt $i/30 ‚Ä¶ not ready yet"; sleep 10
          done
          echo "‚ùå App never became healthy"; exit 1

      # Deployment success info with correct hostname
      - name: Deployment success info
        run: |
          echo "üéâ Backend deployed successfully!"
          echo "Image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
          echo "Web App: https://${HOSTNAME}"
          echo "Health: https://${HOSTNAME}/healthz"
          echo "Port: 8181 (WEBSITES_PORT setting)"
          echo "Environment: Production (NODE_ENV fixed)"
