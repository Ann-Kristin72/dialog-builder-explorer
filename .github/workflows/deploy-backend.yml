name: Deploy Backend to Azure Web App (Container)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: web-teknotassen
  AZURE_RESOURCE_GROUP: teknotassen-rg
  AZURE_CONTAINER_REGISTRY: acrteknotassen
  IMAGE_NAME: teknotassen-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login to Azure (OIDC ‚Äì forutsetter Federated Credentials er satt opp i Azure)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Create ACR if it doesn't exist
      - name: Create ACR if not exists
        run: |
          echo "Checking if ACR exists..."
          if ! az acr show --name $AZURE_CONTAINER_REGISTRY --resource-group $AZURE_RESOURCE_GROUP >/dev/null 2>&1; then
            echo "ACR does not exist, creating..."
            az acr create \
              --resource-group $AZURE_RESOURCE_GROUP \
              --name $AZURE_CONTAINER_REGISTRY \
              --sku Basic \
              --location norwayeast
            echo "‚úÖ ACR created successfully!"
          else
            echo "‚úÖ ACR already exists!"
          fi

      # Enable admin user on ACR (required for credentials)
      - name: Enable ACR admin user
        run: |
          echo "Enabling admin user on ACR..."
          az acr update --name $AZURE_CONTAINER_REGISTRY --admin-enabled true
          echo "‚úÖ ACR admin user enabled!"

      # Get ACR credentials
      - name: Get ACR credentials
        run: |
          echo "Getting ACR credentials..."
          ACR_USERNAME=$(az acr credential show --name $AZURE_CONTAINER_REGISTRY --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $AZURE_CONTAINER_REGISTRY --query "passwords[0].value" -o tsv)
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
          echo "‚úÖ ACR credentials retrieved!"

      # Login to ACR using Microsoft's recommended action
      - name: 'Login to ACR'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      # Build and Push Docker image
      - name: 'Build and Push Docker image'
        working-directory: .
        run: |
          docker build -f backend/Dockerfile -t $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} .
          docker tag $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }}
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest

      # Deploy to Azure Web App using the recommended action
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # CTO's Quickfix: Set WEBSITES_PORT=8181 for immediate success
      - name: Set WEBSITES_PORT for container compatibility
        run: |
          echo "üîß Setting WEBSITES_PORT=8181 (CTO's quickfix)"
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings WEBSITES_PORT=8181
          echo "‚úÖ WEBSITES_PORT set to 8181"

      # Fix NODE_ENV typo (NOD_ENV = protection ‚Üí NODE_ENV = production)
      - name: Fix NODE_ENV typo in Azure settings
        run: |
          echo "üîß Fixing NODE_ENV typo (NOD_ENV ‚Üí NODE_ENV)"
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings NODE_ENV=production
          echo "‚úÖ NODE_ENV set to production"

      # Wait for deployment
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          echo "‚úÖ Deployment wait completed"

      # Check Web App status
      - name: Check Web App status
        run: |
          echo "Checking Web App status..."
          az webapp show --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_WEBAPP_NAME --query "{name:name, state:state, defaultHostName:defaultHostName}" --output table
          echo "‚úÖ Web App status checked"

      # Wait for Web App to be ready
      - name: Wait for Web App to be ready
        run: |
          echo "Waiting for Web App to be ready..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Checking if Web App is responding..."
            if curl -f --max-time 10 "https://$AZURE_WEBAPP_NAME.azurewebsites.net" >/dev/null 2>&1; then
              echo "‚úÖ Web App is responding!"
              break
            else
              echo "Web App not ready yet, waiting 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Web App did not become ready after $max_attempts attempts"
            echo "üîç Debugging information:"
            echo "1. Checking Web App container status..."
            az webapp config container show --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_WEBAPP_NAME --output table
            echo "2. Checking Web App logs..."
            az webapp log tail --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_WEBAPP_NAME --provider docker || echo "Could not get logs"
            echo "3. Checking Web App app settings..."
            az webapp config appsettings list --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_WEBAPP_NAME --output table
            echo "4. Testing container directly..."
            curl -v --max-time 30 "https://$AZURE_WEBAPP_NAME.azurewebsites.net" || echo "Direct test failed"
            exit 1
          fi

      # Health check endpoint (Azure App Service)
      - name: Health check
        run: |
          echo "üè• Testing health endpoint on port 8181..."
          sleep 10  # Wait for container to fully start
          
          # Test health endpoint on port 8181 (WEBSITES_PORT setting)
          HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/healthz"
          echo "üîç Testing: $HEALTH_URL"
          
          # Try multiple times with increasing delays
          for i in {1..5}; do
            echo "üîÑ Attempt $i/5..."
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Health check successful! Container is responding on port 8181"
              break
            else
              echo "‚ùå Health check failed (attempt $i/5)"
              if [ $i -lt 5 ]; then
                echo "‚è≥ Waiting 10 seconds before retry..."
                sleep 10
              else
                echo "üö® All health check attempts failed!"
                echo "üîç Checking container status..."
                az webapp log tail --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
                exit 1
              fi
            fi
          done

      # Log deployment info
      - name: Deployment info
        run: |
          echo "üöÄ Backend deployed successfully!"
          echo "Image: $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }}"
          echo "Web App: https://$AZURE_WEBAPP_NAME.azurewebsites.net"
          echo "Health: https://$AZURE_WEBAPP_NAME.azurewebsites.net/healthz"
