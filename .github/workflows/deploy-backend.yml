name: Deploy Backend to Azure Web App (Container)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: web-teknotassen
  AZURE_RESOURCE_GROUP: teknotassen-rg
  AZURE_CONTAINER_REGISTRY: acrteknotassen
  IMAGE_NAME: teknotassen-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login to Azure (OIDC â€“ forutsetter Federated Credentials er satt opp i Azure)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Create ACR if it doesn't exist
      - name: Create ACR if not exists
        run: |
          echo "Checking if ACR exists..."
          if ! az acr show --name $AZURE_CONTAINER_REGISTRY --resource-group $AZURE_RESOURCE_GROUP >/dev/null 2>&1; then
            echo "ACR does not exist, creating..."
            az acr create \
              --resource-group $AZURE_RESOURCE_GROUP \
              --name $AZURE_CONTAINER_REGISTRY \
              --sku Basic \
              --location norwayeast
            echo "âœ… ACR created successfully!"
          else
            echo "âœ… ACR already exists!"
          fi

      # Login to ACR
      - name: ACR Login
        run: az acr login --name $AZURE_CONTAINER_REGISTRY

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build image
      - name: Build image
        working-directory: .
        run: |
          docker build -f backend/Dockerfile -t $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} .
          docker tag $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest

      # Push image
      - name: Push image
        run: |
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }}
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest

      # Peke Web App til ny tag
      - name: Set container on Web App
        run: |
          az webapp config container set \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $AZURE_WEBAPP_NAME \
            --docker-custom-image-name $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} \
            --docker-registry-server-url https://$AZURE_CONTAINER_REGISTRY.azurecr.io

      # Restart for Ã¥ vÃ¦re sikker
      - name: Restart Web App
        run: az webapp restart -g $AZURE_RESOURCE_GROUP -n $AZURE_WEBAPP_NAME

      # Wait for deployment
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30

      # Health check
      - name: Health check
        run: |
          echo "Testing health endpoint..."
          curl -f https://$AZURE_WEBAPP_NAME.azurewebsites.net/healthz || exit 1
          echo "âœ… Health check passed!"

      # Log deployment info
      - name: Deployment info
        run: |
          echo "ðŸš€ Backend deployed successfully!"
          echo "Image: $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }}"
          echo "Web App: https://$AZURE_WEBAPP_NAME.azurewebsites.net"
          echo "Health: https://$AZURE_WEBAPP_NAME.azurewebsites.net/healthz"
