name: Deploy Backend to Azure Web App (Container)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: web-teknotassen
  AZURE_RESOURCE_GROUP: teknotassen-rg
  AZURE_CONTAINER_REGISTRY: acrteknotassen
  IMAGE_NAME: teknotassen-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login to Azure (OIDC ‚Äì forutsetter Federated Credentials er satt opp i Azure)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Create ACR if it doesn't exist
      - name: Create ACR if not exists
        run: |
          echo "Checking if ACR exists..."
          if ! az acr show --name $AZURE_CONTAINER_REGISTRY --resource-group $AZURE_RESOURCE_GROUP >/dev/null 2>&1; then
            echo "ACR does not exist, creating..."
            az acr create \
              --resource-group $AZURE_RESOURCE_GROUP \
              --name $AZURE_CONTAINER_REGISTRY \
              --sku Basic \
              --location norwayeast
            echo "‚úÖ ACR created successfully!"
          else
            echo "‚úÖ ACR already exists!"
          fi

      # Create App Service Plan if it doesn't exist
      - name: Create App Service Plan if not exists
        run: |
          echo "Checking if App Service Plan exists..."
          if ! az appservice plan show --name teknotassen-plan --resource-group $AZURE_RESOURCE_GROUP >/dev/null 2>&1; then
            echo "App Service Plan does not exist, creating..."
            az appservice plan create \
              --resource-group $AZURE_RESOURCE_GROUP \
              --name teknotassen-plan \
              --sku B1 \
              --is-linux \
              --location norwayeast
            echo "‚úÖ App Service Plan created successfully!"
          else
            echo "‚úÖ App Service Plan already exists!"
          fi

      # Create Web App if it doesn't exist
      - name: Create Web App if not exists
        run: |
          echo "Checking if Web App exists..."
          if ! az webapp show --name $AZURE_WEBAPP_NAME --resource-group $AZURE_RESOURCE_GROUP >/dev/null 2>&1; then
            echo "Web App does not exist, creating..."
            az webapp create \
              --resource-group $AZURE_RESOURCE_GROUP \
              --name $AZURE_WEBAPP_NAME \
              --plan teknotassen-plan \
              --runtime "NODE|20-lts" \
              --deployment-local-git
            echo "‚úÖ Web App created successfully!"
          else
            echo "‚úÖ Web App already exists!"
          fi

      # Configure Web App for container deployment
      - name: Configure Web App for containers
        run: |
          echo "Configuring Web App for container deployment..."
          az webapp config set \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $AZURE_WEBAPP_NAME \
            --linux-fx-version "DOCKER|$AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest"
          echo "‚úÖ Web App configured for containers!"

      # Login to ACR
      - name: ACR Login
        run: az acr login --name $AZURE_CONTAINER_REGISTRY

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build image
      - name: Build image
        working-directory: .
        run: |
          docker build -f backend/Dockerfile -t $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} .
          docker tag $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest

      # Push image
      - name: Push image
        run: |
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }}
          docker push $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:latest

      # Peke Web App til ny tag
      - name: Set container on Web App
        run: |
          az webapp config container set \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $AZURE_WEBAPP_NAME \
            --docker-custom-image-name $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }} \
            --docker-registry-server-url https://$AZURE_CONTAINER_REGISTRY.azurecr.io

      # Restart for √• v√¶re sikker
      - name: Restart Web App
        run: az webapp restart -g $AZURE_RESOURCE_GROUP -n $AZURE_WEBAPP_NAME

      # Wait for deployment
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          echo "‚úÖ Deployment wait completed"

      # Check Web App status
      - name: Check Web App status
        run: |
          echo "Checking Web App status..."
          az webapp show --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_WEBAPP_NAME --query "{name:name, state:state, defaultHostName:defaultHostName}" --output table
          echo "‚úÖ Web App status checked"

      # Wait for Web App to be ready
      - name: Wait for Web App to be ready
        run: |
          echo "Waiting for Web App to be ready..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Checking if Web App is responding..."
            if curl -f --max-time 10 "https://$AZURE_WEBAPP_NAME.azurewebsites.net" >/dev/null 2>&1; then
              echo "‚úÖ Web App is responding!"
              break
            else
              echo "Web App not ready yet, waiting 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Web App did not become ready after $max_attempts attempts"
            exit 1
          fi

      # Health check
      - name: Health check
        run: |
          echo "Testing health endpoint..."
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts..."
            if curl -f --max-time 30 "https://$AZURE_WEBAPP_NAME.azurewebsites.net/healthz"; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "Health check failed, attempt $attempt/$max_attempts"
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Health check failed after $max_attempts attempts"
            echo "Web App URL: https://$AZURE_WEBAPP_NAME.azurewebsites.net"
            echo "Health endpoint: https://$AZURE_WEBAPP_NAME.azurewebsites.net/healthz"
            exit 1
          fi

      # Log deployment info
      - name: Deployment info
        run: |
          echo "üöÄ Backend deployed successfully!"
          echo "Image: $AZURE_CONTAINER_REGISTRY.azurecr.io/$IMAGE_NAME:${{ github.sha }}"
          echo "Web App: https://$AZURE_WEBAPP_NAME.azurewebsites.net"
          echo "Health: https://$AZURE_WEBAPP_NAME.azurewebsites.net/healthz"
